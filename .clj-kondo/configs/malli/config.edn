{:linters {:unresolved-symbol {:exclude [(malli.core/=>)]}, :type-mismatch {:namespaces {clj-lra.util {random-uuid {:arities {0 {:args [], :ret :string}}}, to-uri {:arities {2 {:args [:string :string], :ret :string}}}}, clj-lra.db {add! {:arities {2 {:args [:fn {:op :keys, :opt #:lra{:finish-time :any, :participants :vector}, :req #:lra{:code :string, :start-time :any, :time-limit :int, :status :keyword}}], :ret {:op :keys, :opt #:lra{:finish-time :any, :participants :vector}, :req #:lra{:code :string, :start-time :any, :time-limit :int, :status :keyword}}}}}, all-by-status {:arities {2 {:args [:fn :keyword], :ret :vector}}}, find-by-code {:arities {2 {:args [:fn :string], :ret {:op :keys, :opt #:lra{:finish-time :any, :participants :vector}, :req #:lra{:code :string, :start-time :any, :time-limit :int, :status :keyword}}}}}}, clj-lra.service {all-lra {:arities {2 {:args [:any :keyword], :ret :any}}}, lra-by-code {:arities {2 {:args [:any :string], :ret :any}}}, data->lra {:arities {1 {:args [{:op :keys, :opt #:lra{:finish-time :any, :participants :vector}, :req #:lra{:code :string, :start-time :any, :status :keyword}}], :ret :any}}}}}}}}