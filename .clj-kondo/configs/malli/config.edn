{:linters {:unresolved-symbol {:exclude [(malli.core/=>)]}, :type-mismatch {:namespaces {ayatori.lra.db {save! {:arities {2 {:args [:fn :any], :ret :any}}}, all-by-status {:arities {2 {:args [:fn :keyword], :ret :vector}}}, find-by-code {:arities {2 {:args [:fn :string], :ret :nilable/any}}}, set-status! {:arities {3 {:args [:fn :string :keyword], :ret {:op :keys, :req {:db-before :any, :db-after :any, :tx-data :sequential, :tempids :map, :tx-meta :any}}}}}}, ayatori.lra.core {update-lra! {:arities {2 {:args [:fn :any], :ret :nilable/any}}}, new-nested-lra! {:arities {3 {:args [:fn :any :any], :ret {:op :keys, :req {:parent-code :string, :lra-code :string}}}}}, close! {:arities {3 {:args [:fn :fn :any], :ret :nilable/string}}}, data->lra {:arities {1 {:args [{:op :keys, :req #:lra{:client-id :string, :parent-code :string, :time-limit :any, :acts :any}}], :ret :any}}}, closable-lra? {:arities {1 {:args [:any], :ret :boolean}}}, cancel! {:arities {3 {:args [:fn :fn :any], :ret :nilable/string}}}, cancel-lra! {:arities {3 {:args [:fn :fn :string], :ret :nilable/string}}}, lra-by-code {:arities {2 {:args [:fn :string], :ret :nilable/any}}}, close-lra! {:arities {3 {:args [:fn :fn :string], :ret :nilable/string}}}, data->participant {:arities {1 {:args [{:op :keys, :opt #:participant{:acts :vector, :lra-code :string}, :req #:participant{:client-id :string}}], :ret :any}}}, joinable-lra? {:arities {1 {:args [:any], :ret :boolean}}}, start-lra! {:arities {2 {:args [:fn {:op :keys, :req #:lra{:client-id :string, :parent-code :string, :time-limit :any, :acts :any}}], :ret :nilable/string}}}, join! {:arities {3 {:args [:fn :string {:op :keys, :opt #:participant{:acts :vector, :lra-code :string}, :req #:participant{:client-id :string}}], :ret :nilable/string}}}, cancellable-lra? {:arities {1 {:args [:any], :ret :boolean}}}, new-lra! {:arities {2 {:args [:fn {:op :keys, :req #:lra{:client-id :string, :parent-code :string, :time-limit :any, :acts :any}}], :ret :nilable/any}}}, all-lra {:arities {2 {:args [:fn :keyword], :ret :nilable/vector}}}, ->toplevel-participant {:arities {1 {:args [:any], :ret :any}}}}, ayatori.lra-engine.core {close-success {:arities {1 {:args [{:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}], :ret {:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}}}}, participant-by-status {:arities {2 {:args [:keyword :vector], :ret :sequential}}}, close! {:arities {2 {:args [:fn :any], :ret :any}}}, make-state {:arities {2 {:args [:fn :any], :ret {:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}}}}, complete-participant! {:arities {2 {:args [:string :any], :ret :any}}}, http-request! {:arities {:varargs {:args [:keyword :string {:op :rest, :spec :any}], :ret :any, :min-arity 2}}}, cancel-success {:arities {1 {:args [{:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}], :ret {:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}}}}, cancel! {:arities {2 {:args [:fn :any], :ret :any}}}, cancel-failed {:arities {1 {:args [{:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}], :ret {:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}}}}, cancel-lra! {:arities {1 {:args [{:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}], :ret {:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}}}}, close-lra! {:arities {1 {:args [{:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}], :ret {:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}}}}, find-by-act-type {:arities {2 {:args [:any :keyword], :ret :any}}}, complete-nested-participant! {:arities {2 {:args [:fn :any], :ret :any}}}, compensate! {:arities {3 {:args [:fn :string :vector], :ret :vector}}}, compensate-nested-participant! {:arities {2 {:args [:fn :any], :ret :any}}}, compensate-participant! {:arities {2 {:args [:string :any], :ret :any}}}, complete! {:arities {3 {:args [:fn :string :vector], :ret :vector}}}, close-failed {:arities {1 {:args [{:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}], :ret {:op :keys, :req {:tilakone.core/states :vector, :tilakone.core/action! :ifn, :tilakone.core/state :keyword, :lra :any, :database :fn}}}}}}}}}}