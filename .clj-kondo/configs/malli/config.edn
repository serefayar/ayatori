{:linters {:unresolved-symbol {:exclude [(malli.core/=>)]}, :type-mismatch {:namespaces {ayatori.lra.db {save! {:arities {2 {:args [:fn :any], :ret :any}}}, all-by-status {:arities {2 {:args [:fn :keyword], :ret :vector}}}, find-by-code {:arities {2 {:args [:fn :string], :ret :any}}}, find-by-id {:arities {2 {:args [:fn :int], :ret :any}}}, set-status! {:arities {3 {:args [:fn :string :keyword], :ret {:op :keys, :req {:db-before :any, :db-after :any, :tx-data :sequential, :tempids :map, :tx-meta :any}}}}}}, ayatori.lra.core {new-nested-lra! {:arities {3 {:args [:fn :any :any], :ret :any}}}, close! {:arities {2 {:args [:fn :any], :ret :fn}}}, data->lra {:arities {1 {:args [{:op :keys, :req {:lra/client-id :string, :lra/parent-code :string, :lra/time-limit :any, :lra/acts :any}}], :ret :any}}}, closable-lra? {:arities {1 {:args [:any], :ret :boolean}}}, cancel! {:arities {2 {:args [:fn :any], :ret :fn}}}, cancel-lra! {:arities {2 {:args [:fn :string], :ret :any}}}, lra-by-code {:arities {2 {:args [:fn :string], :ret :any}}}, close-lra! {:arities {2 {:args [:fn :string], :ret :any}}}, data->participant {:arities {1 {:args [{:op :keys, :req {:participant/client-id :string, :participant/acts :vector}}], :ret {:op :keys, :opt {:participant/participants :vector}, :req {:participant/client-id :string, :participant/top-level? :boolean, :participant/status :keyword, :participant/acts :vector}}}}}, joinable-lra? {:arities {1 {:args [:any], :ret :boolean}}}, start-lra! {:arities {2 {:args [:fn {:op :keys, :req {:lra/client-id :string, :lra/parent-code :string, :lra/time-limit :any, :lra/acts :any}}], :ret :any}}}, join! {:arities {3 {:args [:fn :string {:op :keys, :req {:participant/client-id :string, :participant/acts :vector}}], :ret :any}}}, cancellable-lra? {:arities {1 {:args [:any], :ret :boolean}}}, new-lra! {:arities {2 {:args [:fn {:op :keys, :req {:lra/client-id :string, :lra/parent-code :string, :lra/time-limit :any, :lra/acts :any}}], :ret :any}}}, all-lra {:arities {2 {:args [:fn :keyword], :ret :any}}}, ->toplevel-participant {:arities {1 {:args [{:op :keys, :req {:lra/client-id :string, :lra/parent-code :string, :lra/time-limit :any, :lra/acts :any}}], :ret {:op :keys, :req {:participant/client-id :string, :participant/status :keyword, :participant/top-level? :any, :participant/lra-code :string}}}}}}, ayatori.lra-engine.core {close-success {:arities {1 {:args [{:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}], :ret {:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}}}}, close! {:arities {1 {:args [:any], :ret {:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}}}}, make-state {:arities {1 {:args [:any], :ret {:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}}}}, compansate! {:arities {2 {:args [:string :vector], :ret :vector}}}, complete-participant! {:arities {2 {:args [:string {:op :keys, :opt {:participant/participants :vector}, :req {:participant/client-id :string, :participant/top-level? :boolean, :participant/status :keyword, :participant/acts :vector}}], :ret {:op :keys, :opt {:participant/participants :vector}, :req {:participant/client-id :string, :participant/top-level? :boolean, :participant/status :keyword, :participant/acts :vector}}}}}, http-request! {:arities {:varargs {:args [:keyword :any {:op :rest, :spec :any}], :ret :any, :min-arity 2}}}, cancel! {:arities {1 {:args [:any], :ret {:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}}}}, cancel-lra! {:arities {1 {:args [{:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}], :ret {:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}}}}, close-lra! {:arities {1 {:args [{:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}], :ret {:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}}}}, find-by-act-type {:arities {2 {:args [{:op :keys, :opt {:participant/participants :vector}, :req {:participant/client-id :string, :participant/top-level? :boolean, :participant/status :keyword, :participant/acts :vector}} :keyword], :ret :any}}}, compansate-participant! {:arities {2 {:args [:string {:op :keys, :opt {:participant/participants :vector}, :req {:participant/client-id :string, :participant/top-level? :boolean, :participant/status :keyword, :participant/acts :vector}}], :ret {:op :keys, :opt {:participant/participants :vector}, :req {:participant/client-id :string, :participant/top-level? :boolean, :participant/status :keyword, :participant/acts :vector}}}}}, complete! {:arities {2 {:args [:string :vector], :ret :vector}}}, close-failed {:arities {1 {:args [{:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}], :ret {:op :keys, :req {:tikalone.core/states {:op :keys, :opt {:tilakone.core/transitions :vector}, :req {:tilakone.core/name :keyword}}, :tikalone.core/action! :ifn, :tikalone.core/state :keyword, :lra :any}}}}}}}}}}